# =========================
# 공통 설정
# =========================
spring:
  application:
    name: lovechedule-api
  main:
    banner-mode: "console"
  threads:
    virtual:
      enabled: true
  jackson:
    time-zone: Asia/Seoul
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
    default-property-inclusion: non_null

  data:
    mongodb:
      uri: mongodb://root:1234@localhost:27017/lovechedule?authSource=admin
      auto-index-creation: true

  mvc:
    problemdetails:
      enabled: false

#  web:
#    cors:
#      mappings:
#        - path: /api/**
#          allowed-origins: "http://localhost:5173,http://localhost:3000"
#          allowed-methods: GET,POST,PUT,PATCH,DELETE,OPTIONS
#          allowed-headers: "*"
#          allow-credentials: true
#          max-age: 3600
server:
  port: 8080
  compression:
    enabled: true
    min-response-size: 2KB
  forward-headers-strategy: framework   # 프록시/로드밸런서 뒤에서 Host/Proto 보존

# =========================
# 보안/JWT 예시 (값은 환경변수로 주입 권장)
# =========================
security:
  jwt:
    issuer: lovechedule
    access-token-ttl-minutes: 60
    # 실제 비밀키는 환경변수로: SECURITY_JWT_SECRET
    # application.yml에는 적지 마세요
    # secret: ${SECURITY_JWT_SECRET:change-me}

# =========================
# OpenFeign
# =========================
feign:
  httpclient:
    enabled: true           # feign-httpclient 모듈 사용
    max-connections: 200
    max-connections-per-route: 50
  client:
    config:
      default:
        connectTimeout: 3000
        readTimeout: 5000
        loggerLevel: BASIC   # NONE/BASIC/HEADERS/FULL
        decode404: true
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 1024
    response:
      enabled: true

# =========================
# springdoc-openapi (Swagger UI)
# =========================
#springdoc:
#  api-docs:
#    path: /v3/api/docs
#  swagger-ui:
#    path: /swagger
#    display-request-duration: true
#    operations-sorter: method

# =========================
# Actuator / Micrometer (Prometheus)
# =========================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,threaddump,heapdump
  endpoint:
    health:
      show-details: when_authorized
  metrics:
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true
  observations:
    key-values:
      region: seoul

# =========================
# 로깅
# =========================
logging:
  level:
    root: info
    # Mongo 쿼리/연산 디버깅
    org.springframework.data.mongodb.core.MongoTemplate: debug
    org.springframework.data.mongodb.core.ReactiveMongoTemplate: warn
    org.springframework.data.mongodb.core.MongoOperations: debug
    org.mongodb.driver.protocol.command: info
    # Web / 시큐리티 트레이스가 필요할 때
    org.springframework.web: info
    org.springframework.security: info

# logback-slack-appender, loki-logback-appender는 별도의 logback-spring.xml 구성 필요

# =========================
# 프로필: local
# =========================
---
spring:
  config:
    activate:
      on-profile: local
  data:
    mongodb:
      uri: mongodb://root:1234@localhost:27017/lovechedule?authSource=admin
logging:
  level:
    root: debug
    org.springframework.security: info
    org.springframework.web: info

# =========================
# 프로필: prod
# =========================
---
spring:
  config:
    activate:
      on-profile: prod
  data:
    mongodb:
      uri: ${MONGODB_URI}   # 예: mongodb+srv://...  환경변수로 주입
server:
  port: ${PORT:8080}
logging:
  level:
    root: info
